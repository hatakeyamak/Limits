[signals]
# Names given to signal samples
#samples: T2fbd_375_325
samples: T2fbd_250_170, T2fbd_250_180, T2fbd_250_190, T2fbd_250_200, T2fbd_250_210, T2fbd_250_220, T2fbd_250_230, T2fbd_250_240, T2fbd_275_195, T2fbd_275_205, T2fbd_275_215, T2fbd_275_225, T2fbd_275_235, T2fbd_275_245, T2fbd_275_255, T2fbd_275_265, T2fbd_300_220, T2fbd_300_230, T2fbd_300_240, T2fbd_300_250, T2fbd_300_260, T2fbd_300_270, T2fbd_300_280, T2fbd_300_290, T2fbd_325_245, T2fbd_325_255, T2fbd_325_265, T2fbd_325_275, T2fbd_325_285, T2fbd_325_295, T2fbd_325_305, T2fbd_325_315, T2fbd_350_270, T2fbd_350_280, T2fbd_350_290, T2fbd_350_300, T2fbd_350_310, T2fbd_350_320, T2fbd_350_330, T2fbd_350_340, T2fbd_375_295, T2fbd_375_305, T2fbd_375_315, T2fbd_375_325, T2fbd_375_335, T2fbd_375_345, T2fbd_375_355, T2fbd_375_365, T2fbd_400_320, T2fbd_400_330, T2fbd_400_340, T2fbd_400_350, T2fbd_400_360, T2fbd_400_370, T2fbd_400_380, T2fbd_400_390, T2fbd_425_345, T2fbd_425_355, T2fbd_425_365, T2fbd_425_375, T2fbd_425_385, T2fbd_425_395, T2fbd_425_405, T2fbd_425_415, T2fbd_450_370, T2fbd_450_380, T2fbd_450_390, T2fbd_450_400, T2fbd_450_410, T2fbd_450_420, T2fbd_450_430, T2fbd_450_440, T2fbd_475_395, T2fbd_475_405, T2fbd_475_415, T2fbd_475_425, T2fbd_475_435, T2fbd_475_445, T2fbd_475_455, T2fbd_475_465, T2fbd_500_420, T2fbd_500_430, T2fbd_500_440, T2fbd_500_450, T2fbd_500_460, T2fbd_500_470, T2fbd_500_480, T2fbd_500_490, T2fbd_525_445, T2fbd_525_455, T2fbd_525_465, T2fbd_525_475, T2fbd_525_485, T2fbd_525_495, T2fbd_525_505, T2fbd_525_515, T2fbd_550_470, T2fbd_550_480, T2fbd_550_490, T2fbd_550_500, T2fbd_550_510, T2fbd_550_520, T2fbd_550_530, T2fbd_550_540, T2fbd_575_495, T2fbd_575_505, T2fbd_575_515, T2fbd_575_525, T2fbd_575_535, T2fbd_575_545, T2fbd_575_555, T2fbd_575_565, T2fbd_600_520, T2fbd_600_530, T2fbd_600_540, T2fbd_600_550, T2fbd_600_560, T2fbd_600_570, T2fbd_600_580, T2fbd_600_590, T2fbd_625_545, T2fbd_625_555, T2fbd_625_565, T2fbd_625_575, T2fbd_625_585, T2fbd_625_595, T2fbd_625_605, T2fbd_625_615, T2fbd_650_570, T2fbd_650_580, T2fbd_650_590, T2fbd_650_600, T2fbd_650_610, T2fbd_650_620, T2fbd_650_630, T2fbd_650_640, T2fbd_675_595, T2fbd_675_605, T2fbd_675_615, T2fbd_675_625, T2fbd_675_635, T2fbd_675_645, T2fbd_675_655, T2fbd_675_665, T2fbd_700_620, T2fbd_700_630, T2fbd_700_640, T2fbd_700_650, T2fbd_700_660, T2fbd_700_670, T2fbd_700_680, T2fbd_700_690, T2fbd_725_645, T2fbd_725_655, T2fbd_725_665, T2fbd_725_675, T2fbd_725_685, T2fbd_725_695, T2fbd_725_705, T2fbd_725_715, T2fbd_750_670, T2fbd_750_680, T2fbd_750_690, T2fbd_750_700, T2fbd_750_710, T2fbd_750_720, T2fbd_750_730, T2fbd_750_740, T2fbd_775_695, T2fbd_775_705, T2fbd_775_715, T2fbd_775_725, T2fbd_775_735, T2fbd_775_745, T2fbd_775_755, T2fbd_775_765, T2fbd_800_720, T2fbd_800_730, T2fbd_800_740, T2fbd_800_750, T2fbd_800_760, T2fbd_800_770, T2fbd_800_780, T2fbd_800_790

[backgrounds]
# Names given to background samples
samples: ttbarplusw, znunu, rare, qcd

[control_regions]
# Names given to each control region for the uncertainties, and the corresponding samples to be used to estimate the yields in that CR
# Until we have data, the data yield will be based on MC (use the same filename for both dataFile and the first mcFile)
# files should be formated sampleName_crlabel
# Note that the variable names should be the same in the control region trees as in the signal region trees
# for external control regions to be applied with a transfer factor, the 'type' should be 'ext'
# for control regions to be fit simultaneously with the signal region, the 'type' should be 'fit'
# Three mcFiles are provided, comma-separated, the second one can be empty (''). The first is used to obtain the MC yield in the CR (transfer factor denominator). If a second mcFile is provided, this is treated as a background to be subtracted from the yield obtained from the dataFile. The third is used to obtain the MC yield in the SR (transfer factor numerator)
# The 'crwgt' and 'crsel' are the weight variable and selection to be used to obtain yields in the CR for data and MC, the 'srwgt' and 'srsel' are the weight variable and selection to be used to obtain yields in the CR for MC in the SR. If any of these are not provided, the baseline selection/weights will be used
# crName: {
#     'type' : <'ext'/'fit'>,
#     'dataFile' : <dataFileName>,
#     'mcFiles' : <crFileName,crSubFileName,srFileName>,
#     'crwgt' : <crwgtexpr>,
#     'crsel' : <crselexpr>,
#     'srwgt' : <srwgtexpr>,
#     'srsel' : <srselexpr>
#     }
zfromgamma: {
    'type' : 'ext',
    'label': 'photoncr',
    'dataFile' : 'data_photoncr',
    'mcFiles' : ['gjets_photoncr','','znunu'],
    'crwgt' : 'weight*truePUWeight*btagWeight*qcdRespTailWeight*(ismc*(nlbjets==0)*1.536 + ismc*(nlbjets==1)*1.389 + ismc*(nlbjets>=2)*1.230 + (!ismc)*1.0)',
    'crsel' : '(passmetfilters || process==10) && j1chEnFrac>0.1 && j1chEnFrac<0.99 && passjson && passtrigphoOR && origmet<200 && met>250 && njets>=2 && njl>=1 && dphij1met>0.5 && dphij2met>0.15 && dphij3met>0.15 && metovsqrtht>10 && j1lpt>250 && dphij1lmet>2 && (nlbjets==0 || (nlbjets>=1 && mtcsv12met<100))',
    'srwgt' : 'weight*truePUWeight*btagWeight*leptnpweightLM*lepvetoweightLM*(0.97*(nbjets==0) + 1.06*(nbjets>=1 && nlbjets==1) + 1.07*(nbjets>=1 && nlbjets>=2))',
    'srsel' : 'nvetolep==0 && (nvetotau==0 || (ismc && npromptgentau>0)) && (passmetfilters || process==10) && j1chEnFrac>0.1 && j1chEnFrac<0.99 && passjson && (passmetmht100 || ismc) && met>250 && njets>=2 && njl>=1 && dphij1met>0.5 && dphij2met>0.15 && dphij3met>0.15 && metovsqrtht>10 && j1lpt>250 && dphij1lmet>2 && (nbjets==0 || (nbjets>=1 && mtcsv12met<100))'
    }
lostlep: {
    'type' : 'fit',
    'label': 'onelepcr',
    'treesubdir': 'onelepcr',
    'dataFile' : 'data_onelepcr',
    'mcFiles' : ['ttbarplusw_onelepcr','','ttbarplusw'],
    'crsigwgt' : 'weight*truePUWeight*btagWeight*btagFastSimWeight*isrWeightTight*leptnpweightLM',
    'crwgt' : 'weight*truePUWeight*btagWeight*btagFastSimWeight*isrWeightTight*leptnpweightLM',
    'crsel' : '(passmetfilters || process==10) && j1chEnFrac>0.1 && j1chEnFrac<0.99 && passjson && (passtriglepOR || ismc) && nvetolep==1 && mtlepmet<100 && origmet>100 && met>250 && njets>=2 && njl>=1 && dphij1met>0.5 && dphij2met>0.15 && dphij3met>0.15 && metovsqrtht>10 && j1lpt>250 && dphij1lmet>2 && (nbjets==0 || (nbjets>=1 && mtcsv12met<100))',
    'srwgt' : 'weight*truePUWeight*btagWeight*leptnpweightLM*lepvetoweightLM',
    'srsel' : 'nvetolep==0 && (nvetotau==0 || (ismc && npromptgentau>0)) && (passmetfilters || process==10) && j1chEnFrac>0.1 && j1chEnFrac<0.99 && passjson && (passmetmht100 || ismc) && met>250 && njets>=2 && njl>=1 && dphij1met>0.5 && dphij2met>0.15 && dphij3met>0.15 && metovsqrtht>10 && j1lpt>250 && dphij1lmet>2 && (nbjets==0 || (nbjets>=1 && mtcsv12met<100))'
    }
qcd: {
    'type' : 'ext',
    'label': 'qcdcr',
    'dataFile' : 'data_qcdcr',
    'mcFiles' : ['qcd_qcdcr','ttbarplusw','qcd'],
    'crsubRawMC' : 'znunu',
    'crwgt' : 'weight*truePUWeight*btagWeight*qcdRespTailWeight*(leptnpweightLM*lepvetoweightLM*(process != 1) + 1.0*(process == 1))',
    'crsel' : '(passmetfilters || process==10) && (!(run==1&&lumi==46160&&event==331634716)) && (!(run==1&&lumi==91626&&event==208129617)) && j1chEnFrac>0.1 && j1chEnFrac<0.99 && passjson && (passmetmht100 || ismc) && ((ismc && (process==1 || (process!=1 && ((nvetolep==0 && nvetotau==0) || npromptgentau>0)))) || (!ismc && nvetolep==0 && nvetotau==0)) && met>250 && njets>=2 && njl>=1 && metovsqrtht>10 && j1lpt>250 && dphij1lmet>2 && (nbjets==0 || (nbjets>=1 && mtcsv12met<100)) && (dphij1met<0.1 || dphij2met<0.1 || dphij3met<0.1)',
    'crsubsel' : '(passmetfilters || process==10) && j1chEnFrac>0.1 && j1chEnFrac<0.99 && passjson && (passmetmht100 || ismc) && ((nvetolep==0 && nvetotau==0) || (ismc && npromptgentau>0)) && met>250 && njets>=2 && njl>=1 && metovsqrtht>10 && j1lpt>250 && dphij1lmet>2 && (nbjets==0 || (nbjets>=1 && mtcsv12met<100)) && (dphij1met<0.1 || dphij2met<0.1 || dphij3met<0.1)',
    'crnormsel' : '(passmetfilters || process==10) && j1chEnFrac>0.1 && j1chEnFrac<0.99 && passjson && (passmetmht100 || ismc) && nvetolep>0 && mtlepmet<100 && met>250 && njets>=2 && njl>=1 && dphij1met>0.5 && dphij2met>0.15 && dphij3met>0.15 && metovsqrtht>10 && j1lpt>250 && dphij1lmet>2 && (nbjets==0 || (nbjets>=1 && mtcsv12met<100))',
    'crnormwgt' : 'weight*truePUWeight*btagWeight*qcdRespTailWeight*leptnpweightLM',
    'srwgt' : 'weight*truePUWeight*btagWeight*qcdRespTailWeight',
    'srsel' : '(passmetfilters || process==10) && (!(run==1&&lumi==46160&&event==331634716)) && (!(run==1&&lumi==91626&&event==208129617)) && j1chEnFrac>0.1 && j1chEnFrac<0.99 && passjson && (passmetmht100 || ismc) && met>250 && njets>=2 && njl>=1 && dphij1met>0.5 && dphij2met>0.15 && dphij3met>0.15 && metovsqrtht>10 && j1lpt>250 && dphij1lmet>2 && (nbjets==0 || (nbjets>=1 && mtcsv12met<100))'
    }

[bins]
nb1_medboost_lowptb: {
   'cut': 'nbjets>=1 && nlbjets==1 && j1lpt>250 && csvj1pt<40',
   'var': 'met',
   'bin': [300, 400, 500, 1000]
   }
nb1_medboost_medptb: {
   'cut': 'nbjets>=1 && nlbjets==1 && j1lpt>250 && (csvj1pt>40 && csvj1pt<70)',
   'var': 'met',
   'bin': [300, 400, 500, 1000]
   }
nb2_medboost_lowptb: {
   'cut': 'nbjets>=1 && nlbjets>1 && j1lpt>250 && ((csvj1pt+csvj2pt)<100)',
   'var': 'met',
   'bin': [300, 400, 500, 1000]
   }
nb2_medboost_medptb: {
   'cut': 'nbjets>=1 && nlbjets>1 && j1lpt>250 && ((csvj1pt+csvj2pt)>100) && ((csvj1pt+csvj2pt)<160)',
   'var': 'met',
   'bin': [300, 400, 500, 1000]
   }

# Also specify the binning for each set of control regions, both external and simultaneous
[lostlep_bins]
nb1_medboost_lowptb: {
   'cut': 'nbjets>=1 && nlbjets==1 && j1lpt>250 && csvj1pt<40',
   'var': 'met',
   'bin': [300, 400, 500, 1000]
   }
nb1_medboost_medptb: {
   'cut': 'nbjets>=1 && nlbjets==1 && j1lpt>250 && (csvj1pt>40 && csvj1pt<70)',
   'var': 'met',
   'bin': [300, 400, 500, 1000]
   }
nb2_medboost_lowptb: {
   'cut': 'nbjets>=1 && nlbjets>1 && j1lpt>250 && ((csvj1pt+csvj2pt)<100)',
   'var': 'met',
   'bin': [300, 400, 500, 1000]
   }
nb2_medboost_medptb: {
   'cut': 'nbjets>=1 && nlbjets>1 && j1lpt>250 && ((csvj1pt+csvj2pt)>100) && ((csvj1pt+csvj2pt)<160)',
   'var': 'met',
   'bin': [300, 400, 500, 1000]
   }

[zfromgamma_bins]
nb1_medboost_lowptb: {
   'cut': 'nlbjets>=1 && nlbjets==1 && j1lpt>250 && csvj1pt<40',
   'var': 'met',
   'bin': [300, 400, 500, 1000]
   }
nb1_medboost_medptb: {
   'cut': 'nlbjets>=1 && nlbjets==1 && j1lpt>250 && (csvj1pt>40 && csvj1pt<70)',
   'var': 'met',
   'bin': [300, 400, 500, 1000]
   }
nb2_medboost_lowptb: {
   'cut': 'nlbjets>=1 && nlbjets>1 && j1lpt>250 && ((csvj1pt+csvj2pt)<100)',
   'var': 'met',
   'bin': [300, 400, 500, 1000]
   }
nb2_medboost_medptb: {
   'cut': 'nlbjets>=1 && nlbjets>1 && j1lpt>250 && ((csvj1pt+csvj2pt)>100) && ((csvj1pt+csvj2pt)<160)',
   'var': 'met',
   'bin': [300, 400, 500, 1000]
   }

[qcd_bins]
nb1_medboost_lowptb: {
   'cut': 'nbjets>=1 && nlbjets==1 && j1lpt>250 && csvj1pt<40',
   'var': 'met',
   'bin': [300, 1000]
   }
nb1_medboost_medptb: {
   'cut': 'nbjets>=1 && nlbjets==1 && j1lpt>250 && (csvj1pt>40 && csvj1pt<70)',
   'var': 'met',
   'bin': [300, 1000]
   }
nb2_medboost_lowptb: {
   'cut': 'nbjets>=1 && nlbjets>1 && j1lpt>250 && ((csvj1pt+csvj2pt)<100)',
   'var': 'met',
   'bin': [300, 1000]
   }
nb2_medboost_medptb: {
   'cut': 'nbjets>=1 && nlbjets>1 && j1lpt>250 && ((csvj1pt+csvj2pt)>100) && ((csvj1pt+csvj2pt)<160)',
   'var': 'met',
   'bin': [300, 1000]
   }

[config]
# Directory with root files. You must have one for each signal/background specified above! Plus one for data, if havedata is set to Yes
treelocation  = /data/hqu/ramdisk/20160728_13ifb_limits
# Default datacard outputs go under this directory
datacarddir   = Datacards/results
# limit output stuff will go under this directory
limitdir      = Datacards/limits
# subdirectory to use under datacarddir and limitdir
subdir        = limits_T2fbd_13ifb_SSR
# Directory with configuration files (CR-> SR bin map, uncertainties, template datacard)
setuplocation = Datacards/setup/T2fbd
# Root file with stop pair cross sections
xsecfile = ../data/xsecs/stop.root
# Suffix of input root files
filesuffix    = _tree.root
# Datacard template with dummy values to be replaced, to be found in setuplocation
template      = datacard.txt_template
# Do we have data?
havedata      = Yes
# Blind the signal region?
blindsr       = No
# Whether to scale the signal yields to acceptance (i.e., cross section of 1 pb) or the reference cross section
scalesigtoacc = No
# Use dummy uncertainty values for signal/background
dummyuncertainties = No
# Print out all the uncertanties
printuncertainties = No
# If overwriting datacard dir, first rename and save existing dir
saveoverwrites = Yes
# File with names and types of uncertainties to apply, to be found in setuplocation
uncertainty_definitions = define_0l_uncs.conf
# Files specifying uncertainty values by bin start with this string
uncertainty_fileprefix = values_0l_unc
# File speficiying mapping from control regions to signal region
crtosr_bin_map = define_0l_binmap.conf
# method to calculate limits (current options: Asymptotic HybridNew ProfileLikelihood)
limitmethod  = AsymptoticLimits
# only calculate expected limits
expectedonly = False
# Name of your input TTrees
treename      = Events
# variable to project tree onto (for makeCutflowTables)
projvar       = met
# Name of your weight variable (for BKG in SR)
weightname    = weight*truePUWeight*btagWeight*btagFastSimWeight*isrWeightTight*qcdRespTailWeight*leptnpweightLM*lepvetoweightLM
# Name of your weight variable (for signals in SR)
signalweight  = weight*truePUWeight*btagWeight*btagFastSimWeight*isrWeightTight*qcdRespTailWeight*leptnpweightLM*lepvetoweightLM
# Luminosity to scale to (assumes default weights are scaled to 1 /fb)
lumiscale     = 12.9
# Baseline selection in terms of variables in input TTrees. Spaces are fine but don't put in quotes
basesel      = nvetolep==0 && (nvetotau==0 || (ismc && npromptgentau>0)) && (passmetfilters || process==10) && j1chEnFrac>0.1 && j1chEnFrac<0.99 && passjson && (passmetmht100 || ismc) && met>250 && njets>=2 && njl>=1 && dphij1met>0.5 && dphij2met>0.15 && dphij3met>0.15 && metovsqrtht>10 && j1lpt>250 && dphij1lmet>2 && (nbjets==0 || (nbjets>=1 && mtcsv12met<100))
